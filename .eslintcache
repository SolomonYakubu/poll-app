[{"C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\index.js":"1","C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\reportWebVitals.js":"2","C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\App.js":"3","C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\register\\Register.js":"4","C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\log-in\\LogIn.js":"5","C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\poll\\Poll.js":"6","C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\create-poll\\CreatePoll.js":"7","C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\vote\\Vote.js":"8","C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\loader\\Loader.js":"9","C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\header\\Header.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":902,"mtime":1608047691317,"results":"14","hashOfConfig":"12"},{"size":2750,"mtime":1617304557880,"results":"15","hashOfConfig":"12"},{"size":2898,"mtime":1617304557950,"results":"16","hashOfConfig":"12"},{"size":10157,"mtime":1617304557880,"results":"17","hashOfConfig":"12"},{"size":9996,"mtime":1617304557994,"results":"18","hashOfConfig":"12"},{"size":9821,"mtime":1617313378037,"results":"19","hashOfConfig":"12"},{"size":170,"mtime":1607945284515,"results":"20","hashOfConfig":"12"},{"size":1823,"mtime":1608048971743,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"o9kbkj",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\index.js",[],["44","45"],"C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\reportWebVitals.js",[],"C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\App.js",[],"C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\register\\Register.js",[],"C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\log-in\\LogIn.js",[],"C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\poll\\Poll.js",[],"C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\create-poll\\CreatePoll.js",[],"C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\vote\\Vote.js",["46","47"],"import React, { useState, useEffect } from \"react\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Loader from \"../loader/Loader\";\r\nimport axios from \"axios\";\r\nimport \"../style.css\";\r\nexport default function Vote(props) {\r\n  const history = useHistory();\r\n  const [category, setCategory] = useState([]);\r\n  const [categoryId, setCategoryId] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const token = JSON.parse(localStorage.getItem(\"token\"));\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    const getData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:3002/poll/${localStorage.getItem(\"pollName\")}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token.token}`,\r\n            },\r\n          }\r\n        );\r\n        //eslint-disable-next-line\r\n        if (response.data.categories == 0) {\r\n          toast.error(\"This Poll is empty\", {\r\n            position: \"top-right\",\r\n            autoClose: 3000,\r\n            hideProgressBar: \"false\",\r\n          });\r\n          setTimeout(() => history.push(\"/poll\"), 3000);\r\n        }\r\n        setCategory([...response.data.categories]);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        const err = error.message.split(\" \")[5];\r\n        switch (err) {\r\n          case \"401\":\r\n            setLoading(false);\r\n            toast.error(\"Session expired\", {\r\n              position: \"top-right\",\r\n              autoClose: 3000,\r\n              hideProgressBar: \"false\",\r\n            });\r\n            history.push(\"/\");\r\n            break;\r\n\r\n          case \"404\":\r\n            setLoading(false);\r\n            toast.success(\"Click again to vote\", {\r\n              position: \"top-right\",\r\n              autoClose: 3000,\r\n              hideProgressBar: \"false\",\r\n            });\r\n\r\n            break;\r\n          case \"405\":\r\n            setLoading(false);\r\n            toast.success(\"Poll Expired\", {\r\n              position: \"top-right\",\r\n              autoClose: 3000,\r\n              hideProgressBar: \"false\",\r\n            });\r\n            history.push(\"/poll\");\r\n            break;\r\n          default:\r\n            setLoading(false);\r\n            toast.error(\"Network error\", {\r\n              position: \"top-right\",\r\n              autoClose: 3000,\r\n              hideProgressBar: \"false\",\r\n            });\r\n        }\r\n      }\r\n    };\r\n    getData();\r\n    //eslint-disable-next-line\r\n  }, []);\r\n  const vote = (candidate_id, category_id) => {\r\n    let newCategory = category;\r\n\r\n    const catLength = newCategory.length;\r\n\r\n    for (let i = 0; i < catLength; i++) {\r\n      if (newCategory[i]._id === category_id) {\r\n        const canLength = newCategory[i].candidate.length;\r\n        for (let j = 0; j < canLength; j++) {\r\n          newCategory[i].candidate[j].voted = false;\r\n\r\n          if (newCategory[i].candidate[j]._id === candidate_id) {\r\n            newCategory[i].candidate[j].voted = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setCategory([...newCategory]);\r\n  };\r\n  const voteCandidate = async () => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        `http://localhost:3002/poll/vote/`,\r\n        {\r\n          pollName: localStorage.getItem(\"pollName\"),\r\n          vote: { categories: category },\r\n        },\r\n        {\r\n          headers: {\r\n            \"content-type\": \"application/json\",\r\n            Authorization: `Bearer ${token.token}`,\r\n          },\r\n        }\r\n      );\r\n      if (response.status === 200) {\r\n        setLoading(false);\r\n        toast.success(\"You have voted successfully\", {\r\n          position: \"top-right\",\r\n          autoClose: 3000,\r\n          hideProgressBar: \"false\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      const err = error.message.split(\" \")[5];\r\n\r\n      switch (err) {\r\n        case \"403\":\r\n          setLoading(false);\r\n          toast.error(\"You have already voted in this category\", {\r\n            position: \"top-right\",\r\n            autoClose: 3000,\r\n            hideProgressBar: \"false\",\r\n          });\r\n          break;\r\n        case \"401\":\r\n          setLoading(false);\r\n          toast.error(\"Session expired\", {\r\n            position: \"top-right\",\r\n            autoClose: 3000,\r\n            hideProgressBar: \"false\",\r\n          });\r\n          history.push(\"/\");\r\n          break;\r\n\r\n        case \"404\":\r\n          setLoading(false);\r\n          toast.success(\"Click again to vote\", {\r\n            position: \"top-right\",\r\n            autoClose: 3000,\r\n            hideProgressBar: \"false\",\r\n          });\r\n\r\n          break;\r\n        default:\r\n          setLoading(false);\r\n          toast.error(\"Network error\", {\r\n            position: \"top-right\",\r\n            autoClose: 3000,\r\n            hideProgressBar: \"false\",\r\n          });\r\n      }\r\n    }\r\n  };\r\n  // const voteCandidate = async (val) => {\r\n  //   setLoading(true);\r\n  //   for (let x = 0; x < category.length; x++) {\r\n  //     if (category[x].candidate.map((item) => item._id).includes(val)) {\r\n  //       await setCategoryId(category[x]._id);\r\n  //       break;\r\n  //     }\r\n  //   }\r\n  //   console.log(categoryId);\r\n  //   console.log(val);\r\n  //   try {\r\n  //     const response = await axios.post(\r\n  //       `http://localhost:3002/poll/vote/category/${categoryId}/candidate/${val}`,\r\n  //       {\r\n  //         pollName: localStorage.getItem(\"pollName\"),\r\n  //       },\r\n  //       {\r\n  //         headers: {\r\n  //           \"content-type\": \"application/json\",\r\n  //           Authorization: `Bearer ${token.token}`,\r\n  //         },\r\n  //       }\r\n  //     );\r\n\r\n  //     setCategory([...response.data.categories]);\r\n  //     setCategoryId(\"\");\r\n  //     setLoading(false);\r\n  //     console.log(response);\r\n  //   } catch (error) {\r\n  //     const err = error.message.split(\" \")[5];\r\n\r\n  //     switch (err) {\r\n  //       case \"403\":\r\n  //         setLoading(false);\r\n  //         toast.error(\"You have already voted in this category\", {\r\n  //           position: \"top-right\",\r\n  //           autoClose: 3000,\r\n  //           hideProgressBar: \"false\",\r\n  //         });\r\n  //         break;\r\n  //       case \"401\":\r\n  //         setLoading(false);\r\n  //         toast.error(\"Session expired\", {\r\n  //           position: \"top-right\",\r\n  //           autoClose: 3000,\r\n  //           hideProgressBar: \"false\",\r\n  //         });\r\n  //         history.push(\"/\");\r\n  //         break;\r\n\r\n  //       case \"404\":\r\n  //         setLoading(false);\r\n  //         toast.success(\"Click again to vote\", {\r\n  //           position: \"top-right\",\r\n  //           autoClose: 3000,\r\n  //           hideProgressBar: \"false\",\r\n  //         });\r\n\r\n  //         break;\r\n  //       default:\r\n  //         setLoading(false);\r\n  //         toast.error(\"Network error\", {\r\n  //           position: \"top-right\",\r\n  //           autoClose: 3000,\r\n  //           hideProgressBar: \"false\",\r\n  //         });\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <div className=\"poll-container\">\r\n      {loading ? <Loader style={{ position: \"fixed\" }} /> : null}\r\n      <h3\r\n        style={{\r\n          alignSelf: \"flex-start\",\r\n          marginLeft: \"20px\",\r\n          color: \"#fff\",\r\n          fontSize: \"18px\",\r\n          borderBottomStyle: \"solid\",\r\n          borderWidth: \"5px\",\r\n          padding: \"5px\",\r\n        }}\r\n      >\r\n        Poll Name: {localStorage.getItem(\"pollName\")}\r\n      </h3>\r\n      <ToastContainer limit={1} />\r\n      <div\r\n        className=\"poll-body\"\r\n        style={{\r\n          justifyContent: \"center\",\r\n          alignSelf: \"center\",\r\n          marginTop: \"40px\",\r\n          borderRadius: 0,\r\n        }}\r\n      >\r\n        {category.map((item) => (\r\n          <div className=\"create-poll-candidate-div\" key={item._id}>\r\n            <p className=\"create-poll-candidate-label\">Category: {item.name}</p>\r\n\r\n            {item.candidate.map((obj) => (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                  paddingBottom: \"20px\",\r\n                }}\r\n                key={obj._id}\r\n              >\r\n                <div\r\n                  style={{\r\n                    marginBottom: \"2px\",\r\n                    fontSize: \"16px\",\r\n                    marginLeft: \"25px\",\r\n                  }}\r\n                >\r\n                  {obj.name}\r\n                </div>\r\n                <p style={{ marginRight: \"20px\" }}>Votes: {obj.votes}</p>\r\n                <button\r\n                  style={{\r\n                    marginRight: \"20px\",\r\n                    width: \"30px\",\r\n                    height: \"30px\",\r\n                    borderRadius: \"50%\",\r\n                    textAlign: \"center\",\r\n                    border: \"none\",\r\n                    //background: \"rgb(61, 187, 61)\",\r\n                    color: \"#fff\",\r\n                    outline: \"none\",\r\n                  }}\r\n                  className={\r\n                    obj.voted || obj.voters.includes(token.mobile_id)\r\n                      ? \"green\"\r\n                      : \"yellow\"\r\n                  }\r\n                  // key={item._id}\r\n                  // value={item._id}\r\n                  onClick={() => vote(obj._id, item._id)}\r\n                >\r\n                  <FontAwesomeIcon icon={faCheck} />\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n        <button\r\n          className=\"poll-create-poll-btn\"\r\n          onClick={() => voteCandidate()}\r\n        >\r\n          Done\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\loader\\Loader.js",[],"C:\\Users\\Mine\\Desktop\\Projects\\poll-app\\src\\components\\header\\Header.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":12,"column":10,"nodeType":"54","messageId":"55","endLine":12,"endColumn":20},{"ruleId":"52","severity":1,"message":"56","line":12,"column":22,"nodeType":"54","messageId":"55","endLine":12,"endColumn":35},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'categoryId' is assigned a value but never used.","Identifier","unusedVar","'setCategoryId' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]